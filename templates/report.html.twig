{% extends "base.html.twig" %}

{% block title %}Report{% endblock %}

{% block body %}
{% apply markdown_to_html %}
# Report

<a name="kmom01"><h2>Kmom01</h2></a>

Kursmoment ett gick ut på att sätta upp en labbmiljö i Symfony, skapa en rapportsida med lite funktioner samt läsa in sig på objektorientering i PHP.
Mina förkunskaper vad gäller objektorientering är de vi har fått i kursen om objektorienterad Python, så 7,5 högskolepoäng ungefär. 
PHPs modell för objekter och klasser är, i mitt tycke, väldigt lika de som finns i Python, men så klart med PHP-syntax. Istället för:

    "self.my_method()"

inuti klasser har vi:

    "$this->my_method()"

Annorlunda, men inte så mycket. Jag tror att många av de färdigheter jag förvärvat tidigare kommer komma till användning här. I PHP definierar man klasser med syntaxen:

    class MyClass
    {
        public my_public_variable
        protected my_protected_variable
        private my_private_variable

        public function my_public_function() {
            return "something"
        }
    }

Public betyder att man kan komma åt funktionen/variabeln utanför klassen, medans de andra två, private endast i klassen och protected kan de klasser som ärver klassen samt klassen själv se.
Här ser vi då en stor skillnad mot Python, där detta inte är hårdkoddat utan endast en namnkonvention (som dock ger fel i linters).
Vi ska jobba med Symfony i denna kursen, vilket verkar ha vissa likheter med t.ex. Express och Flask som vi har arbetat med i tidigare kurser. Man skriver "routes" för sina olika sidor och kan rendera
twig-filer via dem. Det känns bekant och hanterbart eftersom vi har haft liknande upplägg i flera kurser nu.


PHP The Right Way behandlar kortfattat lite historik kring PHP samt olika konventioner. En sak jag upptäckte där var att PHP
till stor del låter saker gå fel. Att inte alla fel stoppar programmet och tvingar en att fixa dem är för mig främmande; inget programmeringsspråk jag skrivit är så "laissez faire". 
Det och att det finns så många olika erkända och väletablerade kodstandarder var saker jag lyfte på ögonbrynet åt.
Jag gillar också breakdownen om webbapplikationssäkerhet, ska bli kul att läsa mer om det någon gång (men nu ser jag att den kursen endast hålls för de som går tre år, synd!).
Min TIL för detta kmom är att jag nu förstår vad de där package-filerna gör som vi haft ett tag. Jag känner att mycket med webbutveckling blir mer och mer klart för varje kurs.

<a name="kmom02"><h2>Kmom02</h2></a>

I kursmoment 2 har vi arbetat med objektorientering i PHP. Vi lärde oss hur arv, komposition och interface fungerar och skapade egna klasser med 
arv och komposition. Kort sagt är arv ett begrepp som används när man låter en klass få attribut och metoder från en annan klass, och sedan bygger vidare på den.
Ett ofta använt exempel är att man hittar på en "Bil"-klass med olika variabler, t.ex. "färg", metoder, t.ex. "gasa()", och sedan kan man då skapa en "Volvo"-klass som har de tidigare 
metoderna och variablerna, men också andra som är specifika för den. I PHP skriver man så här när en klass ärver:

    class VolvoBil extends Bil 
    {
        // Massor av kod.
    }

Komposition är när ett objekt av en klass bara kan existera i relation till ett objekt av en annan klass. Oftast kan och bör man undvika detta eftersom det blir mindre modulärt än vid aggregation eller
association. Ett exempel på en komposition i PHP kan se ut så här:

    class Motor
    {
        public function start() 
        {
            echo "brum";
        }
        public function stop() 
        {
            echo "klick";
        }
    }

    class Bil 
    {
        private $engine;

        public function __construct() 
        {
            $this->engine = new Engine();
        }
    } 

När bilen tas bort försvinner också motorn. 

Interface är ett annat sätt att hantera arv i PHP. Det är ungefär ett kontrakt som säger vad klassen som implementerar det 
måste innehålla. Det är ganska likt abstrakta klasser, förutom att man i abstrakta klasser kan ha metoder som redan är klara,
men det har man inte i interface. Dessutom kan en klass implementera flera stycken interface, men det går bara att ärva en klass.
Så här ser det ut i PHP:

    interface Bil {
        public function gasa();
    }
    
    class TaxiBil implements Bil {
        public function gasa()
        {
            echo "BRUM!!!";
        }
    }

Det sista vi gick igenom var trait som är en ganska avancerad funktion som innebär att man skriver ett gäng metoder som sedan
kan användas av andra klasser. Traits i sig kan inte instansieras, de är helt enkelt bitar (eller drag, om man ska direktöversätta) som 
lätt kan återanvändas. I PHP:

    trait BilLjud {
        public function tuta() {
            echo "TUUUUUT";
        }
        public function varva() {
            echo "BRuuUUUUUuuuUUUMMMM!";
        }
    }

    class Bil {
        use BilLjud;
    }

    minBil = new Bil;
    minBil->tuta(); // Fungerar, eftersom den använder traiten.

Min implementation av uppgiften har jag pratat lite om på "Card"-sidan. Jag är nöjd med hur det blev, det kändes DRY och 
det blev inte överdrivet komplicerat. Det blev snabbt löst med hur kortleken skulle skapas, via två arrayer som slås ihop, och det var
inte heller jättesvårt att implementera klassen som en tarotkortlek. Det som tog mest tid var nog CSSen, eftersom jag ville att det skulle se fint ut.
förbättringspotential som finns är att lägga till fler sätt att interagera med korten samt lägga till 
spellogik och regler för olika spel. Det vore också kul om man kunde dra runt korten på sidan och på så sätt lägga en patiens, 
eller spela valfritt spel.

Symfony har hittills varit lite svårjobbat, men det har mest berott på att jag först körde med encore, sen fick reda på att det inte 
behövdes och bytte då till AssetMapper. Innan jag fick ihop hur filer skulle ligga, var man länkade till css och så blev det en massa
runtrotande bland filer. Man märker att det skiljer sig en del i hur olika ramverk fungerar, och att det inte alltid är helt
lätt att hålla reda på hur mappstrukturer ska se ut. Men jag ser också potentialen och hoppas vi gör avancerade saker i kommande kursmoment.

Min TIL för detta kursmoment är att det finns en hel del sätt att använda arv, traits, klasser och interfaces och att alla av dem har en användning. 

<a name="kmom03"><h2>Kmom03</h2></a>

I kurmoment 3 skulle vi använda oss av vår kortlek och våra kort och skapa ett litet spel. Jag valde att köra på 21 
eftersom det även ingick i kursmomentet att validera sin kod med PHPStan och PHPmd och jag ville utmana mig med att
ställa in phpstan på högsta strikthetsnivån och ha tid till det. 

Uppgiften började dock med att vi skulle göra ett flödesdiagram och skriva psuedokod för vårt kortspel.
Jag tror att det gjorde det lättare att sortera upp "flödet" i programmet och skapade en struktur jag kunde jobba
kring, ett annorlunda sätt att arbeta från mitt så älskade "trial and error", men det har sina fördelar.
Den främsta är nog att man undviker att behöva skriva om koden när man missat något uppenbart. Nu gjorde jag 
bara väldigt basala delar från uppgiften, men jag tror att det kan bli lite avtagande avkastning om man
lägger jättemycket tid att skriva psuedokod och göra flödesdiagram istället för att skriva koden.

Eftersom kursen handlar om att lära sig objektorienterad programmering i php valde jag att skapa ett antal nya klasser.
De nya är spellogiks-klassen, regel-klassen, kontroller-klassen för 21 och klassen för spelare. Jag tyckte det kändes bra att jobba så,
för då har man etablerat vad de olika ska göra och kan bryta ner problemet i mindre delar, vilket ju är 
90% av programmering. 

Till en början hade jag inte spelar-klassen, utan en array där nyckeln var spelarnamnet, som då hade värdet av en array
som innehöll en korthand och poängen för handen. När jag sedan skulle definiera typen för att PHPStan tycker det är bra
så blev det svårt att få ner i array strukturs-notering hur den fungerade så jag valde att skapa Player-klassen, 
vilket gjorde det mycket lättare att se vad man gjorde när man iterarede över spelar-arrayen, men det blev en hel del refactoring.

I övrigt så är jag nöjd, det flyter på bra och jag tycker koden är lätt att följa, även om jag kanske inte alltid
tycker att else är onödigt, som PHPStan verkar tycka. Förbättringar som finns är väl att lägga till fler spelare, främst. 

Nu när allt är på plats med Symfony tycker jag väl det är helt okej, det är som allt ett verktyg som man får lära sig
för att kunna utnyttja fullt ut.

Min TIL för detta kmom är att else inte ses som något bra och att man kan lära sig extremt mycket från linters. 
Att type-hinta hårt är utmanande, men skapar robust kod.

<a name="kmom04"><h2>Kmom04</h2></a>

I detta kursmoment har vi genererat dokumentation och enhetstestat vår kod med PHPUnit. Jag valde att dokumentera min Card-class, se dokumentationen här: http://www.student.bth.se/~vima23/dbwebb-kurser/mvc/me/report/docs/api/classes/App-Game-Card-Card.html

Den erfarenhet jag har av enhetstester kommer från pythonkursen, och mycket kändes igen.
Jag hade till en början lite problem med PHPUnit, eftersom den tyckte att jag skulle skriva i koden vad jag testade, men när jag väl lyckades få reda på hur man skrev det så 
flöt allt på. Det kändes likt pythons enhetstester. 

Eftersom jag gillar att göra saker "ordentligt" valde jag att satsa på 100% kodtäckning, vilket också känns som en bra övning. Det gick snabbt för mig, eftersom jag upptäckte att 
man i den genererade dokumentationen kunde se vilka rader som testats och inte, och dessutom av vilket test de testats av. Det känns som en otrolig resurs att ha väl skrivna tester,
så att man vid förändringar i programmet kan se att man inte förstör något som tidigare fungerat. En sak jag skulle vilja prova är att arbeta testdrivet från start.
Det får jag kanske chans till i projektet.

Jag lyckades med 100% kodtäckning, och behövde bara lägga till två metoder för att nå dit. De var addCard och drawCard, som behövdes för att testa regel-klassen, eftersom jag behövde en hel del ess.
Jag hade kunnat skippa dem, men då hade jag fått antingen sortera en kortlek eller dra kort från en kortlek i väldigt specifik ordning. Min kod tycker jag är väldigt testbar, 
bevisligen, och jag tror mycket av testbarheten kommer ifrån när jag refaktorerade en massa inför förra kursmomentet, eftersom jag då type-hintade. När man vet vad som ska in och vad som 
kommer ut så blir det enklare att testa.

Testbar kod tycker jag absolut är något som kan identifiera "snygg och ren kod". Kan man inte testa en kod så bör man fråga sig varför den ser ut som den gör. Finns det onåbara rader i
ens kod bör de antagligen tas bort och koden refaktoreras. 

Min TIL är hur likt det var med enhetstester i PHP jämfört med Python och hur kul det är min enhetstester.

<a name="kmom05"><h2>Kmom05</h2></a>

I kursmoment 5 arbetade vid med ORM, alltså object relational mapping, som enkelt uttryckt är ett sätt att arbeta med databaser på ett objektorienterat sätt. Som ORM-verktyg använde vi 
Doctrine, eftersom det är det mest använda när det kommer till PHP-ORMar. Det var hyfsat enkelt att arbeta med, tyckte jag. Jag hade lite problem med datatyper i databasen, men när jag fick
fason på hur man kunde ändra i entity och sen hur processen var att skapa och genomföra en migration var det inte så svårt. Ett par gånger blev det lite trixande i SQLite, men bara 
för att droppa några tables. 

Eftersom vi arbetat med CRUD många gånger nu så gick resten av övningen som en dans, och med stylingen på mina knappar tycker jag det blev väldigt app-likt. I övrigt ändrade jag storleken på
"artikeln" lite så att all information syntes på ett bra sätt i tabellen. Sen gjorde jag lite fix med formuläret och så tyckte jag det blev en trevlig användarupplevelse.

Det var lite ovant att jobba med ORM, men det gick ändå rätt snabbt att överföra kunskaperna från webtec och databaskursen till detta. Mycket är ju likt, men med en annan syntax. 
Eftersom jag kört hårt med att type hinta min kod så blev det dessutom inte så många fel som man annars kan tänka sig händer när man inte arbetar direkt mot en databas som blir sur när
informationen är i fel format. Jag tyckte det kändes väldigt likt att arbeta med övriga objekt, vilket det ju är, så det kändes naturligt. Nu gjorde vi ju inga unions eller andra 
avancerade operationer, tyvärr, så jag får återkomma när jag ser hur man gör dem i ORM, men enkla set/get var inga problem.

Jämfört med att skriva procedurer och sedan koppla dem till JavaScript, som vi gjorde i databas-kursen så verkar det ändå vara marginellt smidigare att arbeta med ORM, eftersom man ju
hoppar över ett steg. Som jag förstått det när jag pratat med en vän som går en annan utbildning och nästan är färdigutbildad så verkar ORM vara vanligt och något som ofta ersätter 
ren SQL-kod, vilket väl känns rimligt. Risken för fel minskas med mer erfarenhet av ett språk. Jag tycker dock själv att det ger mycket att förstå SQL-kod och hur det fungerar, så att
man vet ungefär vilka ramar som finns att arbeta mot.

Min TIL för detta kmom är hur ORM fungerar.

<a name="kmom06"><h2>Kmom06</h2></a>

I detta kurmoment har vi jobbat med automatiserade tester och lite olika verktyg för att få ut mätvärden på sin kod. Vi kan börja med 
PHPMetrics. PHPMetrics kollar igenom php-kod och skapar en hel drös med mätvärden, sen ger den lite olika betyg.
Det som mest lyfts fram är "maintainability/complexity" som visas i små cirklar på första sidan av den genererade webbplatsen. 
Den tittar av storleken på koden, antalet kommentarer samt olika mätvärden som conditionals med mera, sen ger den ett betyg i 
complexity och maintainability. Om man har en väl kommenterad kod som inte är särskilt komplex får den grönt, sen kan man få gult,
som är en varning och rött som visar på att det är en för komplex och svårunderhållen kod. Jag använde mest cirklarna och sen kollade
jag också på de violations som den flaggade för. Det känns som att man kan sitta och djupdyka i PHPMetrics olika mätvärden i veckor utan 
att bli klar. 

Scrutinizers integration gick sådär i början, men när jag fått till config-filen flöt allt på. Jag fick väldigt bra betyg av sidan,
vilket såklart gjorde mig positivt inställd till siten. Badgesen visar på olika mätvärden sammanställda i olika betyg. Det mest
svårtydda är väl "scrutinizer"-betyget, som visar på "kodkvalité". Det är svårt för mig att veta vad som gör att min kod fick
högt betyg, 9.93, i början, men jag antar att det är för att jag använt PHPStan på högsta nivå och validerat mot andra linters ofta.
Kodtäckningen låg lågt i början, 32%, eftersom jag bara hade gjort tester mot mina klasser i game, men nu har jag kommit upp i 84%. 
Som "morot" att skriva tester tycker jag att det fungerar väldigt bra, och jag får verkligen bita mig i läppen för att inte sitta och skriva
tester för att komma upp i hundra procent.  

Jag har knappt skapat mig en syn på vad som är "bra kod" innan jag får revidera den. Men jag försöker införliva DRY, läsbarhet och nu de
sex C:na som grundsyn. Två av de här kan man kolla med de mätverktyg vi använt i detta kursmomentet, det tredje får man hålla koll på själv.
Som nybörjare inom kodning är jag en stark förespråkare för att "hålla sig på mattan" och verkligen följa linters och försöka
lära sig varför de säger till om olika saker.

Min TIL för detta kmom är hur mycket data man kan få ut av en förhållandevis ganska liten del kod och hur mycket av ens 
linting som syns för de här verktygen.

<a name="kmom10"><h2>Kmom10</h2></a>

Sista kursmomentet. Ett projekt! 

### Krav 1-3 Webbplats

#### Innehåll och utseende
Jag valde att köra på ett kortspel till som projekt, och det blev Poker Squares. Utseendemässigt körde jag på lite "spelbords"-känsla, med grön filtmatta som grund och sen en lila kontrastfärg för olika rutor. 
Typografiskt valde jag lite roligare typsnitt, med ett som såg ut att vara ritat med krita på en svart tavla, som kändes passande med kortspelskänslan. 
Sidan skulle ha en fast ram, så att det kändes mer som en app och vara enhetlig i sig själv. I mitt tycke blev stilen bra och känns spelig. About sidan finns där och har en kort beskrivning och startsidan förklarar
alla regler.

Implementationen av själva kortspelet gjorde jag med lite hjälp av gamla klasser, främst mina gamla kort och kortleksklasser, men självklart kom det till mycket nytt. Jag fokuserade mycket på att separera de olika 
delarna av koden från varandra, eftersom jag ville ha lös coupling och hög cohesion. Det gjorde jag genom att ha en klass som agerar brygga mellan spelklasserna och controller-klasserna, PokerLogic, som då gör kodbasen lättare
att överblicka och underhålla. 
#### Repo och dokumentation
[Repot](https://github.com/Challe-P/mvc) är enligt beskrivningarna, med en ganska omfattande readme, och med alla docs genererade. Jag ansträngde mig mycket för att få 100% kodtäckning, även på controllers. Dessutom refaktorerade jag koden så att 
alla klasser blev minst gula i PHPMetrics samt för att få 10/10 i Scrutinizer och ha låg CRAP-score på alla funktioner. Mer om detta under krav 6-rubriken. 

### Krav 4 JSON API
Krav 4 stipulerade att det skulle finnas minst fem olika JSON routes, varav minst en skulle vara en POST route. Många av mina JSON routes bygger på databasen i krav 5, men jag kunde också 
arbetat kring sessionen, om jag hade valt att skippa databasen. Alla routes är samlade på projektets api-sida, men här kommer en genomgång.

1. /proj/api/highscore (GET) - Visar highscore-listan i JSON-format, först alla spelare sorterat efter hur mycket pengar och sedan alla spel 
2. /proj/api/player/{name} (GET) - Visar en spelares sida, med alla information som finns om spelaren, t.ex. namn, pengar och alla spel den spelat.
3. /proj/api/game/{id} (GET) - Visar information om ett specifikt spel, med placering och kortlek och all annan information.
4. /proj/api/new - (POST) - Skapar ett nytt spel via post, genom att man skickar in ett spelarnamn och hur mycket pengar som satsats.
5. /proj/api/game/{id}/{row}:{column} (GET) - Låter en spela spelet genom att lägga kort via en GET-request. Man slänger helt enkelt in IDt följt av den rad och kolumn man vill lägga nästa kort på.
6. /proj/api/gamepost (POST) - Låter en spela spelet genom en POST-request, om man skickar med ID, rad och kolumn.

För att få alla de här att fungera och se bra ut var jag tvungen att skapa funktioner som skriver ut placeringar och kortleken på bra sätt. Samma sak använde jag senare för att spara ner spel i databasen.

### Krav 5 ORM

Min webbplats använder en dabatas via ORM, nämligen en SQLite-databas. I den lagras spelare i en tabell och spel i en annan tabell. Enligt kravet finns det också en [about-sida om databasinförandet]({{ path('aboutDatabase') }}), där man kan läsa 
en hel del kring databasens uppbyggnad med ett tillhörande ER-diagram och lite reflektioner kring ORM i förhållande till att arbeta med procedures. Kort samanfattat kan man säga ungefär så här:
Player-tabellen har tre fält, ID, namn och saldo.

Game-tabellen har tio fält, ID, spelarens id, kortlek, placering, amerikansk poäng, brittisk poäng, satsning, vunna pengar, datum när spelet blev klart och datum när det senast sparades.
Deras relation är en en till många-relation, en spelare kan ha många spel, men ett spel kan bara ha en spelare.

Åtkomsten till databasen sker via ORM-verktyget Doctrine. Jag använde de "repository" som skapas när man skapar en tabell för att skapa metoder som gjorde att jag kunde hämta spelarna och spelen sorterade efter de fält jag ville.

Generellt är det bekvämt att använda ORM eftersom man då slipper göra procedurer i SQL-databasen, och sen kalla på dem i sin kod. Det skulle dock vara en lögn om jag sa att jag inte använde ren SQL och gick in och 
reparerade databasen och ändrade saker under utvecklingen. Ren SQL-kunskap är väldigt bra att ha, även om ORM ofta är smidigt nog. Sen hade jag antagligen kunnat lösa det med ren ORM om jag hade satt in mig i det
fullständigt, men det gick snabbt och smidigt på detta sättet.

### Krav 6 Avancerade features
Detta kravet gick ut på att man skulle lyfta de saker man gjort utöver de andra kraven. Jag hade väldigt svårt att begränsa mig vad gäller det här kravet och gick nog lite för långt, vilket är en av anledningarna till
att det här projektet är så försenat som det är. Jag bestämde mig tidigt att gå för 100% code coverage, något jag faktiskt lyckades med - utan undantag. Det blev en hel del lusläsning av phpunits dokumentation för att
förstå hur webtest fungerar, och sen efter det en hel del refaktorerande när jag upptäckte vissa kodvägar som inte kunde nås. Det svåraste testet att få till var det som skulle testa databas-resetten. Eftersom routen
använde sig av PHPs global funktioner så var det ingen lätt sak att göra så att de gick fel. Efter mycket googlande och läsande av olika reddit-trådar upptäckte jag att man kan göra en egen klass, som använder de globala
funktionerna och genom att mocka den nya klassen göra så att testerna går det håll man vill. Bra övning, men det tog lite tid. Det totala antalet tester slutade på 155. Ganska mastigt!

[Här](https://www.student.bth.se/~vima23/dbwebb-kurser/mvc/me/report/docs/coverage/) kan man se alla gröna rader.

En sak som gjorde det klurigt att få till full code coverage var att jag också hade satt alla linters på striktast nivå, vilket gjorde att alla typer var tvungna att deklareras och kollas. Nu går dock alla linters igenom, utan klagomål.

Det ledde i sin tur till att PHP Metrics uppfattade kodbasen som väldigt komplicerad, och klasserna fick dåligt betyg eftersom de hade "möjliga buggar". Detta löste jag genom att skriva om kod, bryta loss kod och genom att
kommentara koden ordentligt i vissa fall. Nu har alla klasser minst gul färg, vilket då betyder att de är ganska lätta att underhålla. 
Se hela rapporten [här](https://www.student.bth.se/~vima23/dbwebb-kurser/mvc/me/report/docs/metrics/)

I Scrutinizers tester satsade jag också på full pott, vilket jag också lyckades med, se badges nedan. Dessutom har alla funktioner en väldigt låg CRAP score, vilket man kan se på Scrutinizer-sidan:
{% endapply %}
<div class="badges">
    <a href="https://scrutinizer-ci.com/g/Challe-P/mvc/?branch=main">
        <img alt="Scrutinizer Code Quality" src="https://scrutinizer-ci.com/g/Challe-P/mvc/badges/quality-score.png?b=main">
    </a>
    
    <a href="https://scrutinizer-ci.com/g/Challe-P/mvc/?branch=main">
        <img alt="Code Coverage" src="https://scrutinizer-ci.com/g/Challe-P/mvc/badges/coverage.png?b=main">
    </a>
    
    <a href="https://scrutinizer-ci.com/g/Challe-P/mvc/build-status/main">
        <img alt="Build status" src="https://scrutinizer-ci.com/g/Challe-P/mvc/badges/build.png?b=main">
    </a>
</div>


{% apply markdown_to_html %}


Utöver detta såg jag också till att spelet ska gå att spela på mobilen och att hela sidan skulle se snygg ut på mindre enheter. Allt detta sammantaget är det jag gjorde utöver grundkraven.

### Allmänt om projektet
Projektet som helhet tyckte jag var bra. Det kändes som rimligt i förhållande till kursen, om man bortser från krav 6. Jag, som gärna går i spinn med siffror och linters, hade gärna sett att det tas bort. Ungefär 60% av min utvecklingstid gick till att 
skriva tester och refaktorera kod för att phpmetrics och scrutinzer skulle bli nöjda. Visst, det ligger lite på mig också, men så där luddiga krav är ett otyg och bör ses över. Å andra sidan 
lärde jag mig väldigt mycket under tiden som jag säkert kommer ha nytta av framöver. Men kanske kapa ner projektet ytterliggare, det skulle ju som mest ta 40 timmar, något jag överskred med råge.

I övrigt var friheten i projektet trevlig, och jag uppskattar de olika valmöjligheterna. Efter att ha arbetat så här intensivt med PHP så kan jag säga att dess dåliga ryktet är väldigt
överdrivet. Det var extremt sällan jag stötte på något som kändes dumt och onödigt komplicerat som har med själva PHP att göra.  

### Allmänt om kursen
Kursen var kul och lärorik! Det var en hel del olika delar, som faktiskt kändes som att de hade ett sammanhang. Det var många stora programmerings-begrepp som gicks igenom och en 
hel del nya verktyg som alla kändes rimliga och som något man bör kunna använda sig av som programmerare. Jag är väldigt självgående, och materialet i kursen bidrar till att 
man kan arbeta i sin egen takt och visar och guidar en rätt i hur man ska göra, vilket jag verkligen uppskattar. Varje gång man har en fråga på discord så får man hjälp inom rimlig tid.

Jag hade absolut rekommenderat kursen till folk, dels för att visa att php inte är så farligt och dels för att det finns guidning i att göra ett väldigt bra eget projekt. Det
som kunde förbättrats är väl att dra ner lite på innehållet, kanske ta bort PHP Metrics och bara ha Scrutinzer. PHP Metrics var nog det jag var minst nöjd med, jag tyckte det var 
rätt så förvirrande helt ärligt. Kursen får 7/10 i betyg. Tack för ett trevligt läsår!

{% endapply %}
{% endblock %}
